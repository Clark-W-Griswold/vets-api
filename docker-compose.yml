version: '3'
services:
  redis:
    image: redis:3.2-alpine
  postgres:
    image: mdillon/postgis:9.6-alpine
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
    volumes:
      - ./data:/var/lib/postgresql/data:cached
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "54320:5432"
  vets-api:
    build:
      context: .
      args:
        exclude_sidekiq_ent: "${EXCLUDE_SIDEKIQ_ENTERPRISE:-false}"
        sidekiq_license: "${BUNDLE_ENTERPRISE__CONTRIBSYS__COM}"
    image: "vets-api:${DOCKER_IMAGE:-latest}"
    volumes:
      - .:/src/vets-api:cached
      - "../vets-api-mockdata:/cache"
    ports:
      - "3000:3000"
    environment:
      "Settings.database_url": "postgis://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DATABASE:-vets_api_development}?pool=4"
      "Settings.saml.cert_path": "/src/vets-api/config/certs/vetsgov-localhost.crt"
      "Settings.saml.key_path": "/src/vets-api/config/certs/vetsgov-localhost.key"
      "Settings.redis.host": "redis"
      "Settings.redis.port": "6379"
      "Settings.binaries.clamdscan": "clamscan" # Not running a separate process within the container for clamdscan, so we use clamscan which requires no daemon
      POSTGRES_HOST: "${POSTGRES_HOST:-postgres}"
      POSTGRES_PORT: "${POSTGRES_PORT:-5432}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-password}"
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    command: "foreman start"
  kong:
    image: "kong:0.14.0"
    depends_on:
      - postgres
      - vets-api
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: 'postgres'
      KONG_PG_DATABASE: 'postgres'
      KONG_PG_HOST: db
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD:-password}
      KONG_PG_USER: ${POSTGRES_USER:-postgres}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    links:
      - postgres:db
      - vets-api:vets-api
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    restart: on-failure
    command: kong start --run-migrations

volumes:
  db-data:
